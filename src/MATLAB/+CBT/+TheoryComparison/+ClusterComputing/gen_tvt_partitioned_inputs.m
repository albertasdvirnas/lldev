sfunction [theoryStructsPartials, partialStarts, partialEnds] = gen_tvt_partitioned_inputs(partialMaxSizeInBytes)
    import CBT.TheoryComparison.ClusterComputing.prompt_theory_fastas_dirpath;
    import CBT.TheoryComparison.ClusterComputing.find_theory_filepaths_in_dirpath;
    import CBT.TheoryComparison.ClusterComputing.load_structs_from_paths;
    import CBT.TheoryComparison.ClusterComputing.partition_structs;
    import CBT.TheoryComparison.ClusterComputing.minimize_local_index_similarity;

    import Fancy.Utils.data_hash;

    import CBT.Import.Helpers.read_CBT_settings_struct;
    cbtSettingsStruct = read_CBT_settings_struct();
    [...
        concNetropsin_molar,...
        concYOYO1_molar...
        ] = CBT_TheoryComparison.extract_fields(...
        cbtSettingsStruct.cbtheory, {...
            'NETROPSINconc',...
            'YOYO1conc'...
        });
    [...
        meanBpExt_nm,...
        pixelWidth_nm,...
        psfSigmaWidth_nm,...
        stretchStrat,...
        noOfStretchings,...
        optInterval,...
        deltaCut,...
        lengthConstraint,...
        maxPairLengthDiffRelative,...
        maxPairLengthDiffAbsolute_nm...
        ] = CBT_TheoryComparison.extract_fields(...
        cbtSettingsStruct.converttheory, {...
            'nmPerBps',...
            'nmPerPixel',...
            'PSF_width',...
            'stretchStrat',...
            'noOfStretchings',...
            'optInterval',...
            'DeltaCut',...
            'lengthConstraint',...
            'maxPairLengthDiffRelative',...
            'maxPairLengthDiffAbsolute_nm'
        });
    envConstantsStruct = struct('NETROPSINconc', concNetropsin_molar, 'YOYO1conc', concYOYO1_molar);
    constSettings = struct(...
        'NETROPSINconc', concNetropsin_molar,...
        'YOYO1conc', concYOYO1_molar,...
        'nmPerBp', meanBpExt_nm,...
        'nmPerPixel', pixelWidth_nm,...
        'pixelsPerBp', (meanBpExt_nm/pixelWidth_nm),...
        'psfWidth_nm', psfSigmaWidth_nm,...
        'psfWidth_bp', psfSigmaWidth_nm/meanBpExt_nm,...
        'stretchStrat', stretchStrat,...
        'noOfStretchings', noOfStretchings,...
        'optInterval', optInterval,...
        'deltaCut', deltaCut,...
        'maxPairLengthDiffRelative', maxPairLengthDiffRelative,...
        'maxPairLengthDiffAbsolute_nm', maxPairLengthDiffAbsolute_nm,...
        'lengthConstraint', lengthConstraint,...
        'checkCacheForIntensityCurves', true,...
        'saveToCache', true...
        );

    maxPairLengthDiffRelative = constSettings.maxPairLengthDiffRelative;
    maxPairLengthDiffAbsolute_nm = constSettings.maxPairLengthDiffAbsolute_nm;
    constSettings = rmfield(constSettings, 'maxPairLengthDiffRelative');
    constSettings = rmfield(constSettings, 'maxPairLengthDiffAbsolute_nm');
    settingsHash = data_hash(constSettings);
    constSettings.maxPairLengthDiffRelative = maxPairLengthDiffRelative;
    constSettings.maxPairLengthDiffAbsolute_nm = maxPairLengthDiffAbsolute_nm;
    cacheSubdirname = data_hash(envConstantsStruct);
    cacheResultsSubdirname = sprintf( '_R_%s', settingsHash);


    import Fancy.AppMgr.AppResourceMgr;
    appRsrcMgr = AppResourceMgr.get_instance();
    appDirpath = appRsrcMgr.get_app_dirpath();
    permanentCurvesDirpath = fullfile(appDirpath, 'OutputFiles', 'Cache', 'IntensityCurves');

    [aborted, dirpath] = prompt_theory_fastas_dirpath();
    if aborted
        return;
    end
    theorySequenceFilepaths = find_theory_filepaths_in_dirpath(dirpath);
    if isempty(theorySequenceFilepaths)
        return;
    end
    theoryStructs = load_structs_from_paths(theorySequenceFilepaths, permanentCurvesDirpath, cacheSubdirname, cacheResultsSubdirname); % ordered by theory length
    reordering = 1:length(theoryStructs);
    reordering = minimize_local_index_similarity(reordering); 
    theoryStructs = theoryStructs(reordering);% reorder to try to improve load balance for each partition
    [theoryStructsPartials, partialStarts, partialEnds] = partition_structs(theoryStructs, partialMaxSizeInBytes);
end