function comparisonResults = compare_theory_to_theory(theoryStructA, theoryStructB, constantSettingsStruct, cacheResultsSubfolderPath, tryLoadPrecomputedResult, saveToPathTF)
    
    if nargin < 4
        cacheResultsSubfolderPath = '';
    end
    tryLoadPrecomputedResult = false; %todo: handle correctly
    if nargin < 5
        tryLoadPrecomputedResult = not(isempty(cacheResultsSubfolderPath));
    end
    if nargin < 6
        saveToPathTF =  not(isempty(cacheResultsSubfolderPath));
    end
    if tryLoadPrecomputedResult
        import CBT.TheoryComparison.Import.load_result_from_path;
        [found, comparisonResults] = load_result_from_path(cacheResultsSubfolderPath, theoryStructA, theoryStructB);
        if found
            return;
        end
    end
    bitmaskAsIfExperimentB = true;
    import Fancy.Utils.extract_fields;
    [...
        stretchStrategy,...
        noOfStretchings,...
        optInterval,...
        lengthConstraint,...
        deltaCut,...
        psfSigmaWidth_nm,...
        psfSigmaWidth_bp,...
        pixelWidth_nm,...
        meanBpExt_pixels...
        ] = extract_fields(constantSettingsStruct, {
            'stretchStrat',...
            'noOfStretchings',...
            'optInterval',...
            'lengthConstraint',...
            'deltaCut',...
            'psfWidth_nm',...
            'psfWidth_bp',...
            'nmPerPixel',...
            'pixelsPerBp'...
            });

    import CBT.TheoryComparison.get_struct_theory_curve_bpRes;
    theoryCurveA_bpRes = get_struct_theory_curve_bpRes(theoryStructA,1);
    theoryCurveB_bpRes = get_struct_theory_curve_bpRes(theoryStructB,1);
    
    import Microscopy.Simulate.Core.apply_point_spread_function;
    theoryCurveB_bpRes = apply_point_spread_function(theoryCurveB_bpRes, psfSigmaWidth_bp);
    
    import CBT.Core.convert_bpRes_to_pxRes;
    theoryCurveB_pxRes = convert_bpRes_to_pxRes(theoryCurveB_bpRes, meanBpExt_pixels);
    theoryCurveB_pxRes = zscore(theoryCurveB_pxRes);

    import CBT.TheoryComparison.Core.get_theory_bitmask;
    theoryCurveBitmaskB = get_theory_bitmask(theoryCurveB_pxRes, bitmaskAsIfExperimentB, deltaCut, psfSigmaWidth_nm, pixelWidth_nm); % get bitmask as if experiment

    import CBT.TheoryComparison.get_stretch_factors;
    stretchFactors = get_stretch_factors(length(theoryCurveA_bpRes), length(theoryCurveB_pxRes), meanBpExt_pixels, stretchStrategy, noOfStretchings, optInterval, lengthConstraint);

    import CBT.TheoryComparison.Core.compare_at_stretch_factors;
    [bestCC, meanCC, stdCC, bestStretchFactor]...
         = compare_at_stretch_factors(stretchFactors, theoryCurveA_bpRes, psfSigmaWidth_bp, meanBpExt_pixels, theoryCurveB_pxRes, theoryCurveBitmaskB);

    comparisonResults = struct(...
        'structA', theoryStructA,...
        'structB', theoryStructB,...
        'bestCC', bestCC,...
        'meanCC', meanCC,...
        'stdCC', stdCC,...
        'bestStretchFactor', bestStretchFactor,...
        'numStretchFactors', length(stretchFactors),...
        'stretchFactors', stretchFactors...
        );

    if saveToPathTF
        import CBT.TheoryComparison.Export.save_result_to_path;
        save_result_to_path(cacheResultsSubfolderPath, comparisonResults)
    end
end