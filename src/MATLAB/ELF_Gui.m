% ELF - Enzymatic Labelling Fit - Matlab GUI for fitting DNA barcodes from enzymatic labelling

% Begin initialization code
function varargout = ELF_Gui(varargin)
    gui_Singleton = 1;
    gui_State = struct(...
        'gui_Name',       mfilename, ...
        'gui_Singleton',  gui_Singleton, ...
        'gui_OpeningFcn', @ELF_Gui_OpeningFcn, ...
        'gui_OutputFcn',  @ELF_Gui_OutputFcn, ...
        'gui_LayoutFcn',  @layout_gui, ...
        'gui_Callback',   []);
    if nargin && ischar(varargin{1})
       gui_State.gui_Callback = str2func(varargin{1});
    end
    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
    end


    % --- Handles default GUIDE GUI creation and callback dispatch
    function varargout = gui_mainfcn(gui_State, varargin)

      gui_StateFields = {...
          'gui_Name', ...
          'gui_Singleton', ...
          'gui_OpeningFcn', ...
          'gui_OutputFcn', ...
          'gui_LayoutFcn', ...
          'gui_Callback' ...
      };
      gui_Mfile = '';
      for i=1:length(gui_StateFields)
          if ~isfield(gui_State, gui_StateFields{i})
              error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
          elseif isequal(gui_StateFields{i}, 'gui_Name')
              gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
          end
      end

      numargin = length(varargin);

      if numargin == 0
          % ELF_Gui
          % create the GUI only if we are not in the process of loading it
          % already
          gui_Create = true;
      elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
          % ELF_Gui(ACTIVEX,...)
          vin{1} = gui_State.gui_Name;
          vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
          vin{3} = varargin{1};
          vin{4} = varargin{end-1};
          vin{5} = guidata(varargin{1}.Peer);
          feval(vin{:});
          return;
      elseif local_isInvokeHGCallback(gui_State, varargin{:})
          % ELF_Gui('CALLBACK',hObject,eventData,handles,...)
          gui_Create = false;
      else
          % ELF_Gui(...)
          % create the GUI and hand varargin to the openingfcn
          gui_Create = true;
      end

      if ~gui_Create
          % In design time, we need to mark all components possibly created in
          % the coming callback evaluation as non-serializable. This way, they
          % will not be brought into GUIDE and not be saved in the figure file
          % when running/saving the GUI from GUIDE.
          designEval = false;
          if (numargin>1 && ishghandle(varargin{2}))
              fig = varargin{2};
              while ~isempty(fig) && ~ishghandle(fig,'figure')
                  fig = get(fig,'parent');
              end

              designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
          end

          if designEval
              beforeChildren = findall(fig);
          end

          % evaluate the callback now
          varargin{1} = gui_State.gui_Callback;
          if nargout
              [varargout{1:nargout}] = feval(varargin{:});
          else
              feval(varargin{:});
          end

          % Set serializable of objects created in the above callback to off in
          % design time. Need to check whether figure handle is still valid in
          % case the figure is deleted during the callback dispatching.
          if designEval && ishghandle(fig)
              set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
          end
      else
          if gui_State.gui_Singleton
              gui_SingletonOpt = 'reuse';
          else
              gui_SingletonOpt = 'new';
          end

          % Check user passing 'visible' P/V pair first so that its value can be
          % used by oepnfig to prevent flickering
          gui_Visible = 'auto';
          gui_VisibleInput = '';
          for index=1:2:length(varargin)
              if length(varargin) == index || ~ischar(varargin{index})
                  break;
              end

              % Recognize 'visible' P/V pair
              len1 = min(length('visible'),length(varargin{index}));
              len2 = min(length('off'),length(varargin{index+1}));
              if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
                  if strncmpi(varargin{index+1},'off',len2)
                      gui_Visible = 'invisible';
                      gui_VisibleInput = 'off';
                  elseif strncmpi(varargin{index+1},'on',len2)
                      gui_Visible = 'visible';
                      gui_VisibleInput = 'on';
                  end
              end
          end

          % Open fig file with stored settings.  Note: This executes all component
          % specific CreateFunctions with an empty HANDLES structure.


          % Do feval on layout code in m-file if it exists
          gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
          % this application data is used to indicate the running mode of a GUIDE
          % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
          % only used by actxproxy at this time.
          setappdata(0,matlab.lang.makeValidName(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
          if gui_Exported
              gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

              % make figure invisible here so that the visibility of figure is
              % consistent in OpeningFcn in the exported GUI case
              if isempty(gui_VisibleInput)
                  gui_VisibleInput = get(gui_hFigure,'Visible');
              end
              set(gui_hFigure,'Visible','off')

              % openfig (called by local_openfig below) does this for guis without
              % the LayoutFcn. Be sure to do it here so guis show up on screen.
              movegui(gui_hFigure,'onscreen');
          else
              gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
              % If the figure has InGUIInitialization it was not completely created
              % on the last pass.  Delete this handle and try again.
              if isappdata(gui_hFigure, 'InGUIInitialization')
                  delete(gui_hFigure);
                  gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
              end
          end
          if isappdata(0, matlab.lang.makeValidName(['OpenGuiWhenRunning_', gui_State.gui_Name]))
              rmappdata(0,matlab.lang.makeValidName(['OpenGuiWhenRunning_', gui_State.gui_Name]));
          end

          % Set flag to indicate starting GUI initialization
          setappdata(gui_hFigure,'InGUIInitialization',1);

          % Fetch GUIDE Application options
          gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
          % Singleton setting in the GUI M-file takes priority if different
          gui_Options.singleton = gui_State.gui_Singleton;

          if ~isappdata(gui_hFigure,'GUIOnScreen')
              % Adjust background color
              if isfield(gui_Options, 'syscolorfig') && gui_Options.syscolorfig
                  set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
              end

              % Generate HANDLES structure and store with GUIDATA. If there is
              % user set GUI data already, keep that also.
              data = guidata(gui_hFigure);
              handles = guihandles(gui_hFigure);
              if ~isempty(handles)
                  if isempty(data)
                      data = handles;
                  else
                      names = fieldnames(handles);
                      for k=1:length(names)
                          data.(char(names(k)))=handles.(char(names(k)));
                      end
                  end
              end
              guidata(gui_hFigure, data);
          end

          % Apply input P/V pairs other than 'visible'
          for index=1:2:length(varargin)
              if length(varargin) == index || ~ischar(varargin{index})
                  break;
              end

              len1 = min(length('visible'),length(varargin{index}));
              if ~strncmpi(varargin{index},'visible',len1)
                  try
                      set(gui_hFigure, varargin{index}, varargin{index+1});
                  catch
                      break;
                  end
              end
          end

          % If handle visibility is set to 'callback', turn it on until finished
          % with OpeningFcn
          gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
          if strcmp(gui_HandleVisibility, 'callback')
              set(gui_hFigure,'HandleVisibility', 'on');
          end

          feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

          if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
              % Handle the default callbacks of predefined toolbar tools in this
              % GUI, if any
              guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure);

              % Update handle visibility
              set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

              % Call openfig again to pick up the saved visibility or apply the
              % one passed in from the P/V pairs
              if ~gui_Exported
                  gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
              elseif ~isempty(gui_VisibleInput)
                  set(gui_hFigure,'Visible',gui_VisibleInput);
              end
              if strcmpi(get(gui_hFigure, 'Visible'), 'on')
                  figure(gui_hFigure);

                  if gui_Options.singleton
                      setappdata(gui_hFigure,'GUIOnScreen', 1);
                  end
              end

              % Done with GUI initialization
              if isappdata(gui_hFigure,'InGUIInitialization')
                  rmappdata(gui_hFigure,'InGUIInitialization');
              end

              % If handle visibility is set to 'callback', turn it on until
              % finished with OutputFcn
              gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
              if strcmp(gui_HandleVisibility, 'callback')
                  set(gui_hFigure,'HandleVisibility', 'on');
              end
              gui_Handles = guidata(gui_hFigure);
          else
              gui_Handles = [];
          end

          if nargout
              [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
          else
              feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
          end

          if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
              set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
          end
      end
      
      
      
        function gui_hFigure = local_openfig(name, singleton, visible)
            % openfig with three arguments was new from R13. Try to call that first, if
            % failed, try the old openfig.
            if nargin('openfig') == 2
              % OPENFIG did not accept 3rd input argument until R13,
              % toggle default figure visible to prevent the figure
              % from showing up too soon.
              gui_OldDefaultVisible = get(0,'defaultFigureVisible');
              set(0,'defaultFigureVisible','off');
              gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
              set(0,'defaultFigureVisible',gui_OldDefaultVisible);
            else
              % Call version of openfig that accepts 'auto' option"
              gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);
            %     %workaround for CreateFcn not called to create ActiveX
            %     if feature('HGUsingMATLABClasses')
            %         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');
            %         for i=1:length(peers)
            %             if isappdata(peers(i),'Control')
            %                 actxproxy(peers(i));
            %             end
            %         end
            %     end
            end
        end
        
        
        function result = local_isInvokeActiveXCallback(~, varargin)
            try
                result = ispc && iscom(varargin{1}) && isequal(varargin{1},gcbo);
            catch
                result = false;
            end
        end

        function result = local_isInvokeHGCallback(gui_State, varargin)
              try
                  fhandle = functions(gui_State.gui_Callback);
                  result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
                           (ischar(varargin{1}) ...
                           && isequal(ishghandle(varargin{2}), 1) ...
                           && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                              ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
              catch
                  result = false;
              end
        end
    end


    
    function ELF_Gui_OpeningFcn(hObject, ~, handles, varargin)
            handles.output = hObject;
            guidata(hObject, handles);
            % End initialization code
    end

    function varargout = ELF_Gui_OutputFcn(hObject, ~, handles)
        varargout{1} = handles.output;

        % Input parameters from file
        figHandle = ancestor(hObject,'figure');
        set(figHandle, 'Toolbar', 'figure');
        update_params_from_file(guihandles(figHandle));
        
        % Visibility and enable
        
        disableHandleNames = {...
            'NPEAKS', ...
            'numpeaksST', ...
            'chi2EditLS', ...
            'chi2EditM', ...
            'resetfitLS', ...
            'resetfitMan', ...
            'browseTosaveB', ...
            'filenameET', ...
            'saveresultB', ...
            'peakpositionssaveB', ...
            'peakcurvessaveB', ...
            'savefit', ...
            'saveplot', ...
            'nmUnitB', ...
            'pixelUnitB' ...
        };
        update_handle_props(handles, disableHandleNames, 'Enable', 'off');


    end

    function hFig = layout_gui(policy)
        % policy - create a new figure or use a singleton. 'new' or 'reuse'.
        persistent hsingleton;
        if (strcmpi(policy, 'reuse') && not(isempty(hsingleton)) && ishandle(hsingleton))
            hFig = hsingleton;
            return;
        end
        taginfoStruct = struct();
        taginfoStruct.figure = 2;
        taginfoStruct.text = 25;
        taginfoStruct.axes = 2;
        taginfoStruct.pushbutton = 12;
        taginfoStruct.checkbox = 101;
        taginfoStruct.edit = 100;
        taginfoStruct.uipanel = 12;
        taginfoStruct.listbox = 3;
        taginfoStruct.uitable = 2;
        taginfoStruct.slider = 2;
        taginfoStruct.togglebutton = 4;
        taginfoStruct.uibuttongroup = 3;
        taginfoStruct.radiobutton = 9;

        guideOpts = struct();
        guideOpts.active_h = -1;
        guideOpts.taginfo = taginfoStruct;
        guideOpts.override = 0;
        guideOpts.release = [];
        guideOpts.resize = 'none';
        guideOpts.accessibility = 'callback';
        guideOpts.mfile = 1;
        guideOpts.callbacks = 1;
        guideOpts.singleton = 1;
        guideOpts.syscolorfig = 0;
        guideOpts.blocking = 0;
        guideOpts.lastSavedFile = '/home/caro/Desktop/caro/summer/fit/gui/ELF_Gui.m';
        guideOpts.lastFilename = '/home/caro/Desktop/caro/fitGui.fig';
        
        appdata = [];
        appdata.GUIDEOptions = guideOpts;
        appdata.GUIDELayoutEditor = [];
        appdata.initTags = struct(...
            'handle', [], ...
            'tag', 'mainFigure');
        hFig = figure(...
          'Units','characters',...
          'Position',[135.714285714286 18.75 188 38.6875],...
          'Visible',get(0,'defaultfigureVisible'),...
          'Color',[0.9 0.9 0.9],...%'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
          'CurrentAxesMode','manual',...
          'IntegerHandle','off',...
          'MenuBar','none',...
          'Name','Enzymatic Labelling Fit Tool',...
          'NumberTitle','off',...
          'Resize','off',...
          'PaperPosition',get(0,'defaultfigurePaperPosition'),...
          'ScreenPixelsPerInchMode','manual',...
          'ChildrenMode','manual',...
          'ParentMode','manual',...
          'HandleVisibility','callback',...
          'Tag','mainFigure');

        % axes - plot
        appdata = [];
        hAxesTabGroup = uitabgroup(...
          'Parent',hFig,...
          'Units','characters',...
          'Position',[95 0.5 92 37.5],...
          'ChildrenMode','manual',...
          'ParentMode','manual',...
          'TabLocation','top',...
          'Tag','AxesTabGroup' );
        lsqfAxesTab = uitab('Parent',hAxesTabGroup,'title','LEAST-SQUARES','Tag','lsqfAx');
        manfAxesTab = uitab('Parent',hAxesTabGroup, 'title','MANUAL','Tag','manfAx');

        appdata = [];
        hlsqfAxes = axes(...
          'Parent',lsqfAxesTab,...
          'FontUnits',get(0,'defaultaxesFontUnits'),...
          'Units','characters',...
          'CameraMode',get(0,'defaultaxesCameraMode'),...
          'CameraPosition',[0.5 0.5 9.16025403784439],...
          'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
          'CameraTarget',[0.5 0.5 0.5],...
          'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
          'CameraViewAngle',6.60861036031192,...
          'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
          'Position',[8.5 3.5 80 29.5],...
          'ActivePositionProperty','position',...
          'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
          'LooseInset',[14.5785714285714 3.56125 10.6535714285714 2.428125],...
          'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
          'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
          'PlotBoxAspectRatio',[1 0.810924369747899 0.810924369747899],...
          'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
          'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
          'ColorOrder',[0 0.600000023841858 0.200000002980232;0 0 0.501960813999176;0.600000023841858 0.800000011920929 0;0.493999987840652 0.184000000357628 0.555999994277954;1 0.600000023841858 0;0.600000023841858 0.600000023841858 1;0 0.501960813999176 0.501960813999176],...
          'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
          'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
          'BoxFrameMode',get(0,'defaultaxesBoxFrameMode'),...
          'XRulerMode',get(0,'defaultaxesXRulerMode'),...
          'XTick',[],...
          'XTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
          'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
          'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
          'YRulerMode',get(0,'defaultaxesYRulerMode'),...
          'YTick',[],...
          'YTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
          'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
          'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
          'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
          'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
          'BoxStyle','full',...
          'LineWidth',1,...
          'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
          'NextPlot','add',...
          'SortMethod','childorder',...
          'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
          'Box','on',...
          'Tag','lsqfAxes',...
          'ParentMode','manual');
        hlsqfAxesTitle = get(hlsqfAxes,'title');
            set(hlsqfAxesTitle,...
            'Parent',hlsqfAxes,...
            'Units','data',...
            'FontUnits','points',...
            'DecorationContainer',[],...
            'DecorationContainerMode','auto',...
            'Color',[0 0 0],...
            'ColorMode','auto',...
            'Position',[0.5 1.00949913644214 0.499999999999998],...
            'PositionMode','auto',...
            'Interpreter','tex',...
            'InterpreterMode','auto',...
            'Rotation',0,...
            'RotationMode','auto',...
            'FontName','Helvetica',...
            'FontNameMode','auto',...
            'FontUnitsMode','auto',...
            'FontSize',11,...
            'FontSizeMode','auto',...
            'FontAngle','normal',...
            'FontAngleMode','auto',...
            'FontWeight','bold',...
            'FontWeightMode','auto',...
            'HorizontalAlignment','center',...
            'HorizontalAlignmentMode','auto',...
            'VerticalAlignment','bottom',...
            'VerticalAlignmentMode','auto',...
            'EdgeColor','none',...
            'EdgeColorMode','auto',...
            'LineStyle','-',...
            'LineStyleMode','auto',...
            'LineWidth',0.5,...
            'LineWidthMode','auto',...
            'BackgroundColor','none',...
            'BackgroundColorMode','auto',...
            'Margin',3,...
            'MarginMode','auto',...
            'Clipping','off',...
            'ClippingMode','auto',...
            'Layer','middle',...
            'LayerMode','auto',...
            'FontSmoothing','on',...
            'FontSmoothingMode','auto',...
            'UnitsMode','auto',...
            'IncludeRenderer','on',...
            'HG1EraseMode','auto',...
            'BusyAction','queue',...
            'Interruptible','on',...
            'SelectionHighlight','on',...
            'SelectionHighlightMode','auto',...
            'HitTest','on',...
            'HitTestMode','auto',...
            'PickableParts','visible',...
            'PickablePartsMode','auto',...
            'IsContainer','off',...
            'IsContainerMode','auto',...
            'XLimInclude','on',...
            'XLimIncludeMode','auto',...
            'YLimInclude','on',...
            'YLimIncludeMode','auto',...
            'ZLimInclude','on',...
            'ZLimIncludeMode','auto',...
            'CLimInclude','on',...
            'CLimIncludeMode','auto',...
            'ALimInclude','on',...
            'ALimIncludeMode','auto',...
            'Description','Axes Title',...
            'DescriptionMode','auto',...
            'Visible','on',...
            'VisibleMode','auto',...
            'Serializable','on',...
            'SerializableMode','auto',...
            'HandleVisibility','off',...
            'HandleVisibilityMode','auto',...
            'TransformForPrintFcnImplicitInvoke','on',...
            'TransformForPrintFcnImplicitInvokeMode','auto');
        hlsqfAxesXlabel = get(hlsqfAxes,'xlabel');
            set(hlsqfAxesXlabel,...
            'Parent',hlsqfAxes,...
            'Units','data',...
            'FontUnits','points',...
            'DecorationContainer',[],...
            'DecorationContainerMode','auto',...
            'Color',[0.15 0.15 0.15],...
            'ColorMode','auto',...
            'Position',[0.5 -0.00345423143350598 0],...
            'PositionMode','auto',...
            'Interpreter','tex',...
            'InterpreterMode','auto',...
            'Rotation',0,...
            'RotationMode','auto',...
            'FontName','Helvetica',...
            'FontNameMode','auto',...
            'FontUnitsMode','auto',...
            'FontSize',11,...
            'FontSizeMode','auto',...
            'FontAngle','normal',...
            'FontAngleMode','auto',...
            'FontWeight','normal',...
            'FontWeightMode','auto',...
            'HorizontalAlignment','center',...
            'HorizontalAlignmentMode','auto',...
            'VerticalAlignment','top',...
            'VerticalAlignmentMode','auto',...
            'EdgeColor','none',...
            'EdgeColorMode','auto',...
            'LineStyle','-',...
            'LineStyleMode','auto',...
            'LineWidth',0.5,...
            'LineWidthMode','auto',...
            'BackgroundColor','none',...
            'BackgroundColorMode','auto',...
            'Margin',3,...
            'MarginMode','auto',...
            'Clipping','off',...
            'ClippingMode','auto',...
            'Layer','back',...
            'LayerMode','auto',...
            'FontSmoothing','on',...
            'FontSmoothingMode','auto',...
            'UnitsMode','auto',...
            'IncludeRenderer','on',...
            'HG1EraseMode','auto',...
            'BusyAction','queue',...
            'Interruptible','on',...
            'SelectionHighlight','on',...
            'SelectionHighlightMode','auto',...
            'HitTest','on',...
            'HitTestMode','auto',...
            'PickableParts','visible',...
            'PickablePartsMode','auto',...
            'IsContainer','off',...
            'IsContainerMode','auto',...
            'XLimInclude','on',...
            'XLimIncludeMode','auto',...
            'YLimInclude','on',...
            'YLimIncludeMode','auto',...
            'ZLimInclude','on',...
            'ZLimIncludeMode','auto',...
            'CLimInclude','on',...
            'CLimIncludeMode','auto',...
            'ALimInclude','on',...
            'ALimIncludeMode','auto',...
            'Description','NumericRuler Label',...
            'DescriptionMode','auto',...
            'Visible','on',...
            'VisibleMode','auto',...
            'Serializable','on',...
            'SerializableMode','auto',...
            'HandleVisibility','off',...
            'HandleVisibilityMode','auto',...
            'TransformForPrintFcnImplicitInvoke','on',...
            'TransformForPrintFcnImplicitInvokeMode','auto');
        hlsqfAxesYlabel = get(hlsqfAxes,'ylabel');
            set(hlsqfAxesYlabel,...
            'Parent',hlsqfAxes,...
            'Units','data',...
            'FontUnits','points',...
            'DecorationContainer',[],...
            'DecorationContainerMode','auto',...
            'Color',[0.15 0.15 0.15],...
            'ColorMode','auto',...
            'Position',[-0.0084033613445379 0.5 0],...
            'PositionMode','auto',...
            'Interpreter','tex',...
            'InterpreterMode','auto',...
            'Rotation',90,...
            'RotationMode','auto',...
            'FontName','Helvetica',...
            'FontNameMode','auto',...
            'FontUnitsMode','auto',...
            'FontSize',11,...
            'FontSizeMode','auto',...
            'FontAngle','normal',...
            'FontAngleMode','auto',...
            'FontWeight','normal',...
            'FontWeightMode','auto',...
            'HorizontalAlignment','center',...
            'HorizontalAlignmentMode','auto',...
            'VerticalAlignment','bottom',...
            'VerticalAlignmentMode','auto',...
            'EdgeColor','none',...
            'EdgeColorMode','auto',...
            'LineStyle','-',...
            'LineStyleMode','auto',...
            'LineWidth',0.5,...
            'LineWidthMode','auto',...
            'BackgroundColor','none',...
            'BackgroundColorMode','auto',...
            'Margin',3,...
            'MarginMode','auto',...
            'Clipping','off',...
            'ClippingMode','auto',...
            'Layer','back',...
            'LayerMode','auto',...
            'FontSmoothing','on',...
            'FontSmoothingMode','auto',...
            'UnitsMode','auto',...
            'IncludeRenderer','on',...
            'HG1EraseMode','auto',...
            'BusyAction','queue',...
            'Interruptible','on',...
            'SelectionHighlight','on',...
            'SelectionHighlightMode','auto',...
            'HitTest','on',...
            'HitTestMode','auto',...
            'PickableParts','visible',...
            'PickablePartsMode','auto',...
            'IsContainer','off',...
            'IsContainerMode','auto',...
            'XLimInclude','on',...
            'XLimIncludeMode','auto',...
            'YLimInclude','on',...
            'YLimIncludeMode','auto',...
            'ZLimInclude','on',...
            'ZLimIncludeMode','auto',...
            'CLimInclude','on',...
            'CLimIncludeMode','auto',...
            'ALimInclude','on',...
            'ALimIncludeMode','auto',...
            'Description','NumericRuler Label',...
            'DescriptionMode','auto',...
            'Visible','on',...
            'VisibleMode','auto',...
            'Serializable','on',...
            'SerializableMode','auto',...
            'HandleVisibility','off',...
            'HandleVisibilityMode','auto',...
            'TransformForPrintFcnImplicitInvoke','on',...
            'TransformForPrintFcnImplicitInvokeMode','auto');

        appdata = [];
        hmanfAxes = axes(...
          'Parent',manfAxesTab,...
          'FontUnits',get(0,'defaultaxesFontUnits'),...
          'Units','characters',...
          'CameraMode',get(0,'defaultaxesCameraMode'),...
          'CameraPosition',[0.5 0.5 9.16025403784439],...
          'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
          'CameraTarget',[0.5 0.5 0.5],...
          'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
          'CameraViewAngle',6.60861036031192,...
          'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
          'Position',[8.5 3.5 80 29.5],...
          'ActivePositionProperty','position',...
          'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
          'LooseInset',[14.5785714285714 3.56125 10.6535714285714 2.428125],...
          'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
          'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
          'PlotBoxAspectRatio',[1 0.810924369747899 0.810924369747899],...
          'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
          'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
          'ColorOrder',[0 0.600000023841858 0.200000002980232;0 0 0.501960813999176;0.600000023841858 0.800000011920929 0;0.493999987840652 0.184000000357628 0.555999994277954;1 0.600000023841858 0;0.600000023841858 0.600000023841858 1;0 0.501960813999176 0.501960813999176],...
          'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
          'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
          'BoxFrameMode',get(0,'defaultaxesBoxFrameMode'),...
          'XRulerMode',get(0,'defaultaxesXRulerMode'),...
          'XTick',[],...
          'XTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
          'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
          'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
          'YRulerMode',get(0,'defaultaxesYRulerMode'),...
          'YTick',[],...
          'YTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
          'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
          'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
          'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
          'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
          'BoxStyle','full',...
          'LineWidth',1,...
          'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
          'NextPlot','add',...
          'SortMethod','childorder',...
          'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
          'Box','on',...
          'Tag','manfAxes',...
          'ParentMode','manual');
        hmanfAxesTitle = get(hmanfAxes,'title');
            set(hmanfAxesTitle,...
            'Parent',hmanfAxes,...
            'Units','data',...
            'FontUnits','points',...
            'DecorationContainer',[],...
            'DecorationContainerMode','auto',...
            'Color',[0 0 0],...
            'ColorMode','auto',...
            'Position',[0.5 1.00949913644214 0.499999999999998],...
            'PositionMode','auto',...
            'Interpreter','tex',...
            'InterpreterMode','auto',...
            'Rotation',0,...
            'RotationMode','auto',...
            'FontName','Helvetica',...
            'FontNameMode','auto',...
            'FontUnitsMode','auto',...
            'FontSize',11,...
            'FontSizeMode','auto',...
            'FontAngle','normal',...
            'FontAngleMode','auto',...
            'FontWeight','bold',...
            'FontWeightMode','auto',...
            'HorizontalAlignment','center',...
            'HorizontalAlignmentMode','auto',...
            'VerticalAlignment','bottom',...
            'VerticalAlignmentMode','auto',...
            'EdgeColor','none',...
            'EdgeColorMode','auto',...
            'LineStyle','-',...
            'LineStyleMode','auto',...
            'LineWidth',0.5,...
            'LineWidthMode','auto',...
            'BackgroundColor','none',...
            'BackgroundColorMode','auto',...
            'Margin',3,...
            'MarginMode','auto',...
            'Clipping','off',...
            'ClippingMode','auto',...
            'Layer','middle',...
            'LayerMode','auto',...
            'FontSmoothing','on',...
            'FontSmoothingMode','auto',...
            'UnitsMode','auto',...
            'IncludeRenderer','on',...
            'HG1EraseMode','auto',...
            'BusyAction','queue',...
            'Interruptible','on',...
            'SelectionHighlight','on',...
            'SelectionHighlightMode','auto',...
            'HitTest','on',...
            'HitTestMode','auto',...
            'PickableParts','visible',...
            'PickablePartsMode','auto',...
            'IsContainer','off',...
            'IsContainerMode','auto',...
            'XLimInclude','on',...
            'XLimIncludeMode','auto',...
            'YLimInclude','on',...
            'YLimIncludeMode','auto',...
            'ZLimInclude','on',...
            'ZLimIncludeMode','auto',...
            'CLimInclude','on',...
            'CLimIncludeMode','auto',...
            'ALimInclude','on',...
            'ALimIncludeMode','auto',...
            'Description','Axes Title',...
            'DescriptionMode','auto',...
            'Visible','on',...
            'VisibleMode','auto',...
            'Serializable','on',...
            'SerializableMode','auto',...
            'HandleVisibility','off',...
            'HandleVisibilityMode','auto',...
            'TransformForPrintFcnImplicitInvoke','on',...
            'TransformForPrintFcnImplicitInvokeMode','auto');
        hmanfAxesXlabel = get(hmanfAxes,'xlabel');
            set(hmanfAxesXlabel,...
            'Parent',hmanfAxes,...
            'Units','data',...
            'FontUnits','points',...
            'DecorationContainer',[],...
            'DecorationContainerMode','auto',...
            'Color',[0.15 0.15 0.15],...
            'ColorMode','auto',...
            'Position',[0.5 -0.00345423143350598 0],...
            'PositionMode','auto',...
            'Interpreter','tex',...
            'InterpreterMode','auto',...
            'Rotation',0,...
            'RotationMode','auto',...
            'FontName','Helvetica',...
            'FontNameMode','auto',...
            'FontUnitsMode','auto',...
            'FontSize',11,...
            'FontSizeMode','auto',...
            'FontAngle','normal',...
            'FontAngleMode','auto',...
            'FontWeight','normal',...
            'FontWeightMode','auto',...
            'HorizontalAlignment','center',...
            'HorizontalAlignmentMode','auto',...
            'VerticalAlignment','top',...
            'VerticalAlignmentMode','auto',...
            'EdgeColor','none',...
            'EdgeColorMode','auto',...
            'LineStyle','-',...
            'LineStyleMode','auto',...
            'LineWidth',0.5,...
            'LineWidthMode','auto',...
            'BackgroundColor','none',...
            'BackgroundColorMode','auto',...
            'Margin',3,...
            'MarginMode','auto',...
            'Clipping','off',...
            'ClippingMode','auto',...
            'Layer','back',...
            'LayerMode','auto',...
            'FontSmoothing','on',...
            'FontSmoothingMode','auto',...
            'UnitsMode','auto',...
            'IncludeRenderer','on',...
            'HG1EraseMode','auto',...
            'BusyAction','queue',...
            'Interruptible','on',...
            'SelectionHighlight','on',...
            'SelectionHighlightMode','auto',...
            'HitTest','on',...
            'HitTestMode','auto',...
            'PickableParts','visible',...
            'PickablePartsMode','auto',...
            'IsContainer','off',...
            'IsContainerMode','auto',...
            'XLimInclude','on',...
            'XLimIncludeMode','auto',...
            'YLimInclude','on',...
            'YLimIncludeMode','auto',...
            'ZLimInclude','on',...
            'ZLimIncludeMode','auto',...
            'CLimInclude','on',...
            'CLimIncludeMode','auto',...
            'ALimInclude','on',...
            'ALimIncludeMode','auto',...
            'Description','NumericRuler Label',...
            'DescriptionMode','auto',...
            'Visible','on',...
            'VisibleMode','auto',...
            'Serializable','on',...
            'SerializableMode','auto',...
            'HandleVisibility','off',...
            'HandleVisibilityMode','auto',...
            'TransformForPrintFcnImplicitInvoke','on',...
            'TransformForPrintFcnImplicitInvokeMode','auto');
        hmanfAxesYlabel = get(hmanfAxes,'ylabel');
            set(hmanfAxesYlabel,...
            'Parent',hmanfAxes,...
            'Units','data',...
            'FontUnits','points',...
            'DecorationContainer',[],...
            'DecorationContainerMode','auto',...
            'Color',[0.15 0.15 0.15],...
            'ColorMode','auto',...
            'Position',[-0.0084033613445379 0.5 0],...
            'PositionMode','auto',...
            'Interpreter','tex',...
            'InterpreterMode','auto',...
            'Rotation',90,...
            'RotationMode','auto',...
            'FontName','Helvetica',...
            'FontNameMode','auto',...
            'FontUnitsMode','auto',...
            'FontSize',11,...
            'FontSizeMode','auto',...
            'FontAngle','normal',...
            'FontAngleMode','auto',...
            'FontWeight','normal',...
            'FontWeightMode','auto',...
            'HorizontalAlignment','center',...
            'HorizontalAlignmentMode','auto',...
            'VerticalAlignment','bottom',...
            'VerticalAlignmentMode','auto',...
            'EdgeColor','none',...
            'EdgeColorMode','auto',...
            'LineStyle','-',...
            'LineStyleMode','auto',...
            'LineWidth',0.5,...
            'LineWidthMode','auto',...
            'BackgroundColor','none',...
            'BackgroundColorMode','auto',...
            'Margin',3,...
            'MarginMode','auto',...
            'Clipping','off',...
            'ClippingMode','auto',...
            'Layer','back',...
            'LayerMode','auto',...
            'FontSmoothing','on',...
            'FontSmoothingMode','auto',...
            'UnitsMode','auto',...
            'IncludeRenderer','on',...
            'HG1EraseMode','auto',...
            'BusyAction','queue',...
            'Interruptible','on',...
            'SelectionHighlight','on',...
            'SelectionHighlightMode','auto',...
            'HitTest','on',...
            'HitTestMode','auto',...
            'PickableParts','visible',...
            'PickablePartsMode','auto',...
            'IsContainer','off',...
            'IsContainerMode','auto',...
            'XLimInclude','on',...
            'XLimIncludeMode','auto',...
            'YLimInclude','on',...
            'YLimIncludeMode','auto',...
            'ZLimInclude','on',...
            'ZLimIncludeMode','auto',...
            'CLimInclude','on',...
            'CLimIncludeMode','auto',...
            'ALimInclude','on',...
            'ALimIncludeMode','auto',...
            'Description','NumericRuler Label',...
            'DescriptionMode','auto',...
            'Visible','on',...
            'VisibleMode','auto',...
            'Serializable','on',...
            'SerializableMode','auto',...
            'HandleVisibility','off',...
            'HandleVisibilityMode','auto',...
            'TransformForPrintFcnImplicitInvoke','on',...
            'TransformForPrintFcnImplicitInvokeMode','auto');

        % load
        hLoadPanel = uipanel(...
          'Parent',hFig,...
          'FontUnits',get(0,'defaultuipanelFontUnits'),...
          'Units','characters',...
          'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
          'HighlightColor',[0.92 0.92 1.0],...
          'ShadowColor',[1 1 1],...
          'Title','LOAD EXPERIMENT',...
          'Position',[5 27.7 39 9],...
          'ParentMode','manual',...
          'Tag','LoadPanel',...
          'FontSize',8,...
          'FontWeight','bold',...
          'TitlePosition','centertop');

        [~] = uicontrol(...
          'Parent',hLoadPanel,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','Text file',...
          'Style',get(0,'defaultuicontrolStyle'),...
          'Position',[26 5.5 10 1.6875],...
          'Callback',@(hObject,~) prompt_update_from_barcode_text_file(guihandles(ancestor(hObject,'figure'))),...
          'Children',[],...
          'ParentMode','manual',...
          'Tag','loadTextB',...
          'FontSize',8);

        [~] = uicontrol(...
          'Parent',hLoadPanel,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','Aligned kymo.',...
          'Style',get(0,'defaultuicontrolStyle'),...
          'Position',[12 5.5 13 1.6875],...
          'Callback',@(hObject,~) prompt_update_from_aligned_kymo(guihandles(ancestor(hObject,'figure'))),...
          'Children',[],...
          'ParentMode','manual',...
          'Tag','loadAlignedkymoB',...
          'FontSize',8);


        [~] = uicontrol(...
          'Parent',hLoadPanel,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','Raw kymo.',...
          'Style',get(0,'defaultuicontrolStyle'),...
          'Position',[1 5.5 10 1.6875],...
          'Callback',@(hObject,~) prompt_update_from_raw_kymo(guihandles(ancestor(hObject,'figure'))),...
          'Children',[],...
          'ParentMode','manual',...
          'Tag','loadRawkymoB',...
          'FontSize',8);

        [~] = uicontrol(...
            'Parent',hLoadPanel,...
            'FontUnits',get(0,'defaultuicontrolFontUnits'),...
            'Units','characters',...
            'String',blanks(0),...
            'Style','text',...
            'Position',[3 3.2 30.5 2],...
            'BackgroundColor',[1 1 1],...
            'Children',[],...
            'ParentMode','manual',...
            'Tag','filenameST',...
            'FontSize',8);

        [~] = uicontrol(...
          'Parent',hLoadPanel,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','Select region',...
          'Style','togglebutton',...
          'Position',[1 1 13 1.5625],...
          'Callback',@(hObject,~) prompt_update_plot_region(guihandles(ancestor(hObject,'figure'))),...
          'Children',[],...
          'ParentMode','manual',...
          'Tag','endandstartB',...
          'FontSize',8);

        hfitPanel = uipanel(...
          'Parent',hFig,...
          'Units','characters',...
          'Title','FIT',...
          'FontWeight','bold',...
          'FontSize',10.5,...
          'Position',[47 6 46 32],...
          'HighlightColor',[0.92 0.92 1.0],...
          'ShadowColor',[1 1 1],...
          'ChildrenMode','manual',...
          'ParentMode','manual',...
          'Tag','fitpanel');
      
        hfitTabGroup = uitabgroup(...
          'Parent',hfitPanel,...
          'Units','characters',...
          'Position',[-0.2 -0.2 46 30.5],...
          'ChildrenMode','manual',...
          'ParentMode','manual',...
          'TabLocation','top',...
          'Tag','fittabgroup');

        lsqfTab = uitab('Parent',hfitTabGroup,'tag', 'lsq','title','LEAST-SQUARES');

        manfTab = uitab('Parent',hfitTabGroup, 'tag','man','title','MANUAL');

       [~] = uicontrol(...
          'Parent',lsqfTab,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','<HTML>&chi&sup2 test  p-value</HTML>',...
          'Style','toggle',...
          'Position',[2 1.8 15 1.8],...
          'Children',[],...
          'ParentMode','manual',...
          'DeleteFcn',blanks(0),...
          'ButtonDownFcn',blanks(0),...
          'ForegroundColor',[0 0 0],...
          'BackgroundColor',[0.93 0.93 0.93],...
          'Tag','chi2StaticLS',...
          'Enable','inactive',...
          'FontSize',9.5);

        [~] = uicontrol(...
          'Parent',lsqfTab,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String',blanks(0),...
          'Style','text',...
          'Position',[17.5 2 12 1.375],...
          'BackgroundColor',[1 1 1],...
          'Children',[],...
          'ParentMode','manual',...
          'Tag','chi2EditLS');


        [~] = uicontrol(...
          'Parent',manfTab,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','<HTML>&chi&sup2 test p-value</HTML>',...
          'Style','toggle',...
          'Position',[2 1.8 15 1.8],...
          'Children',[],...
          'ParentMode','manual',...
          'DeleteFcn',blanks(0),...
          'ButtonDownFcn',blanks(0),...
          'ForegroundColor',[0 0 0],...
          'BackgroundColor',[0.93 0.93 0.93],...
          'Tag','chi2StaticM',...
          'Enable','inactive',...
          'FontSize',9.5);

        [~] = uicontrol(...
          'Parent',manfTab,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String',blanks(0),...
          'Style','text',...
          'Position',[17.5 2 12 1.375],...
          'BackgroundColor',[1 1 1],...
          'Children',[],...
          'ParentMode','manual',...
          'Tag','chi2EditM');

        [~] = uicontrol(...
          'Parent',lsqfTab,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','RESET',...
          'Style','push',...
          'Position',[31 2 12 1.5],...
          'BackgroundColor',[0.996 0.996 0.996],...
          'Callback',@(hObject,~) reset_fit(guihandles(ancestor(hObject,'figure'))),...
          'Children',[],...
          'ParentMode','manual',...
          'FontSize',8,...
          'Tag','resetfitLS');
      
        [~] = uicontrol(...
          'Parent',manfTab,...
          'FontUnits',get(0,'defaultuicontrolFontUnits'),...
          'Units','characters',...
          'String','RESET',...
          'Style','push',...
          'Position',[31 2 12 1.5],...
          'BackgroundColor',[0.996 0.996 0.996],...
          'Callback',@(hObject,~) reset_fit(guihandles(ancestor(hObject,'figure'))),...
          'Children',[],...
          'ParentMode','manual',...
          'FontSize',8,...
          'Tag','resetfitMan');

        [~] = uicontrol(...
            'Parent',lsqfTab,...
            'FontUnits',get(0,'defaultuicontrolFontUnits'),...
            'Units','characters',...
            'String','FIT',...
            'Style','toggle',...
            'Position',[27 25.5 15 1.7],...
            'BackgroundColor',[0.995 0.995 0.995],...
            'Callback',@(hObject,~) update_ls_fit(guihandles(ancestor(hObject,'figure'))),...
            'Children',[],...
            'ParentMode','manual',...
            'FontSize',9,...
            'FontWeight','bold',...
            'Enable','off',...
            'Tag','LSFitB');

            [~] = uicontrol(...
              'Parent',lsqfTab,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Peaks (#)',...
              'Style','text',...
              'Position',[2 25.9 10 0.8],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','numpeaksST',...
              'FontSize',8.5);

            [~] = uicontrol(...
              'Parent',lsqfTab,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[12 25.7 6 1.2],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','NPEAKS',...
              'FontSize',8);

            [~] = uicontrol(...
              'Parent',lsqfTab,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','text',...
              'Position',[2 5 41 20],...
              'BackgroundColor', [1 1 1] ,...
              'Children',[],...
              'ParentMode','manual',...
              'Visible','on',...
              'Tag','peaksResultLsqFit',...
              'FontSize',8);
        % manual
          rowNames = {'1' '2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19',...
                      '21' '22','23','24','25','26','27','28','29','30',...
                      '31' '32','33','34','35','36','37','38','39','40'};
          [~] = uitable(...
              'Parent',manfTab,...
              'Tag','peaksTableManual',...
              'Data',zeros([40 2]),...
              'RowName',rowNames,...
              'ColumnName',{'Position (pixels)','Area one peak'},...
            'ColumnWidth',{124},'Position',[10 115 300 320], 'ColumnFormat', repmat({'numeric'}, [1 40]),...
            'ColumnEditable', true);

          [~] = uicontrol(...
            'Parent',manfTab,...
            'FontUnits',get(0,'defaultuicontrolFontUnits'),...
            'Units','characters',...
            'String','UPDATE',...
            'Style','toggle',...
            'Position',[15 4.8 15 1.7],...
            'BackgroundColor',[0.995 0.995 0.995],...
            'Callback',@(hObject,~) update_mat_fit(guihandles(ancestor(hObject,'figure'))),...
            'Children',[],...
            'ParentMode','manual',...
            'FontSize',9,...
            'FontWeight','bold',...
            'Enable','off',...
            'Tag','MFitB');

            h58 = uipanel(...
              'Parent',hFig,...
              'FontUnits',get(0,'defaultuipanelFontUnits'),...
              'Units','characters',...
              'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
              'HighlightColor',[0.92 0.92 1.0],...
              'ShadowColor',[1 1 1],...
              'Title','FIXED PARAMETERS',...
              'TitlePosition','centertop',...
              'Position',[5 11 39 15],...
              'ParentMode','manual',...
              'Interruptible','off',...
              'Tag','parampanel',...
              'FontSize',8,...
              'FontWeight','bold');

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','PSF width (pixel)',...
              'Style','text',...
              'Position',[23.5 11.5 14 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','text8',...
              'FontSize',8.5);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[23.5 10.5 13.5 1],...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'BackgroundColor', [1 1 1],...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','sigmapixET',...
              'FontSize',8);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[1 7.5 18 1],...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'Interruptible','off',...
              'BackgroundColor', [1 1 1],...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','areaOnePeak',...
              'FontSize',8);
          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Area of one peak',...
              'Style','text',...
              'Position',[1 8.5 18 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','areaOnePeak_label',...
              'FontSize',8.5);
          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[22 7.5 15 1],...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'BackgroundColor', [1 1 1],...
              'Interruptible','off',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','areaOnePeakStd',...
              'FontSize',8);
          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','std(areaOnePeak)',...
              'Style','text',...
              'Position',[22 8.5 6 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','areaOnePeakStd_label',...
              'FontSize',8);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[1 2.2 15 1],...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'Interruptible','off',...
              'BackgroundColor', [1 1 1],...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','meanBackET',...
              'FontSize',8);
          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','mean(noise)',...
              'Style','text',...
              'Position',[1 3.2 10.5 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','backST',...
              'FontSize',8.5);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[22 2.2 15 1],...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'BackgroundColor', [1 1 1],...
              'Interruptible','off',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','stdBackET',...
              'FontSize',8);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','std(noise)',...
              'Style','text',...
              'Position',[22 3.2 9 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','stdBackST',...
              'FontSize',8.5);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[1 4.8 5 1],...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'Interruptible','off',...
              'BackgroundColor', [1 1 1],...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','confidenceInterval',...
              'FontSize',8);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Confidence interval',...
              'Style','text',...
              'Position',[0.8 5.8 15.8 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','confidenceInterval_label',...
              'FontSize',8.5);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','x std(areaOnePeak)',...
              'Style','text',...
              'Position',[6.2 4.8 8 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','confidenceIntervalUnit_label',...
              'FontSize',8.5);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','PSF width (nm)',...
              'Style','text',...
              'Position',[1 11.5 12.5714285714286 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','psfSigmaWidth_nm_label',...
              'FontSize',8.5);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[1.2 10.5 12.1428571428571 1],...
              'Callback',@(hObject,~) update_psf_sigma_width_px(guihandles(ancestor(hObject,'figure'))),...
              'Children',[],...
              'ParentMode','manual',...
              'BackgroundColor', [1 1 1],...
              'Tag','psfSigmaWidth_nm',...
              'FontSize',8);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[15.5 10.5 6 1],...
              'Callback',@(hObject,~) update_psf_sigma_width_px(guihandles(ancestor(hObject,'figure'))),...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'BackgroundColor', [1 1 1],...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','pixelWidth_nm',...
              'FontSize',8);

          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','pixel width (nm)',...
              'Style','text',...
              'Position',[15 11.5 7.14285714285714 0.875],...
              'Children',[],...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','pixelWidth_nm_label',...
              'FontSize',8.5);
          
            [~] = uicontrol(...
              'Parent',h58,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Reload from ELF_Settings.txt',...
              'Style','push',...
              'Position',[0.5 0.1 37.5 1.7],...
              'BackgroundColor',[0.901, 0.956, 0.921],...
              'Callback',@(hObject,~) update_params_from_file(guihandles(ancestor(hObject,'figure'))),...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','btnReloadSettingParams',...
              'FontSize',8);

        % save

        
            hPanelSave = uipanel(...
              'Parent',hFig,...
              'FontUnits','points',...
              'Units','characters',...
              'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
              'ShadowColor',[1 1 1],...
              'HighlightColor',[0.92 0.92 1.0],...
              'Position',[5 1.5 39 8],...
              'ParentMode','manual',...
              'Tag','savepanel',...
              'Visible','on');


            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','SAVE',...
              'Style','togglebutton',...
              'Position',[1 5.7 12 1.8],...
              'Callback',@(hObject,~) export_results(guihandles(ancestor(hObject,'figure'))),...
              'Children',[],...
              'ParentMode','manual',...
              'FontWeight','bold',...
              'FontSize',7.5,...
              'Tag','saveresultB');

            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Browse',...
              'Style',get(0,'defaultuicontrolStyle'),...
              'Position',[23 6 10 1.2],...
              'Callback',@(~,~) try_update_save_dirpath(),...
              'Children',[],...
              'KeyPressFcn',blanks(0),...
              'ParentMode','manual',...
              'DeleteFcn',blanks(0),...
              'ButtonDownFcn',blanks(0),...
              'Tag','browseTosaveB',...
              'FontSize',7.5);

            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String',blanks(0),...
              'Style','edit',...
              'Position',[18 4.5 20 1],...
              'Children',[],...
              'ParentMode','manual',...
              'FontSize',7.5,...
              'Tag','filenameET');

            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Peak positions ',...
              'Style','radiobutton',...
              'Position',[1.5 1.7 20 0.8],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','peakpositionssaveB',...
              'FontSize',8);

            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Peak curves',...
              'Style','radiobutton',...
              'Position',[1.5 2.9 20 0.8],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','peakcurvessaveB',...
              'FontSize',8);

            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Fit',...
              'Style','radiobutton',...
              'Position',[1.5 4.1 5 0.8],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','savefit',...
              'FontSize',8);

            [~] = uicontrol(...
              'Parent',hPanelSave,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','Plot',...
              'Style','radiobutton',...
              'Position',[1.5 0.5 10 0.8],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','saveplot',...
              'FontSize',8);

            h75 = uibuttongroup(...
              'Parent',hPanelSave,...
              'FontUnits','points',...
              'Units','characters',...
              'Position',[21 0.3 15 2],...
              'ParentMode','manual',...
              'Tag','unitsgrouppanel',...
              'FontSize',7);

            [~] = uicontrol(...
              'Parent',h75,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','pix',...
              'Style','radiobutton',...
              'Value',get(0,'defaultuicontrolValue'),...
              'Position',[1 0.5 7 1],...
              'Children',[],...
              'ParentMode','manual',...
              'FontSize',7.8,...
              'Tag','pixelUnitB');

            [~] = uicontrol(...
              'Parent',h75,...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'String','nm',...
              'Style','radiobutton',...
              'Value',get(0,'defaultuicontrolValue'),...
              'Position',[8.5 0.5 7 1],...
              'Callback',blanks(0),...
              'Children',[],...
              'ParentMode','manual',...
              'FontSize',7.8,...
              'Tag','nmUnitB');

            [~] = uicontrol(...
              'Parent',hFig,...
              'Style','togglebutton',...
              'String','EXIT',...
              'Callback',@(hObject,~) delete(ancestor(hObject,'figure')),...
              'FontUnits',get(0,'defaultuicontrolFontUnits'),...
              'Units','characters',...
              'Position',[77 1.4 13 2],...
              'Children',[],...
              'ParentMode','manual',...
              'Tag','exitB',...
              'FontSize',9);

        hsingleton = hFig;

    end

    function [] = update_handle_props(handles, handleNames, propName, propVal)
        handleNames = cellfun(@matlab.lang.makeValidName, handleNames, 'UniformOutput', false);
        isKnownHandle = arrayfun(@(handleName) isfield(handles, handleName), handleNames);
        if any(not(isKnownHandle))
            error('Bad handle names');
        end
        knownHandlesCellArr = cellfun(@(handleName) handles.(handleName), handleNames, 'UniformOutput', false);
        cellfun(@(handle) set(handle, propName, propVal), knownHandlesCellArr, 'UniformOutput', false);
    end

    function [] = update_params_from_file(handles)
        import ELF.ParamsELF;
        
        paramsELF = ParamsELF();

        set_psf_sigma_width_nm(handles, paramsELF.psfSigmaWidth_nm);
        set_nms_per_pixel(handles, paramsELF.pixelWidth_nm);
        update_psf_sigma_width_px(handles);

        set_area_one_peak(handles, paramsELF.areaOnePeak)
        set_area_one_peak_std(handles, paramsELF.areaOnePeakStd);
        
        set_mean_background_noise(handles, paramsELF.meanBackgroundNoise);
        set_std_background_noise(handles, paramsELF.stdBackgroundNoise);
        
        set_confidence_interval(handles, paramsELF.confidenceInterval)
        
        set_barcode_line_color(paramsELF.barcodeLineColor);
        set_fit_line_color(paramsELF.fitLineColor);
        set_peak_pos_rect_color(paramsELF.peaksPositionRectColor);
    end

    function [] = prompt_update_from_raw_kymo(handles)
        [aborted, barcode, ~, ~, rawKymoTiffFilepath] = prompt_barcode_from_raw_kymo();
        if aborted
            return;
        end
        
        update_paths_from_source_path(handles, rawKymoTiffFilepath);
        
        update_barcode_and_plots(handles, barcode);

        
        disableHandleNames = {...
            'NPEAKS', ...
            'numpeaksST', ...
            'chi2EditLS', ...
            'chi2EditM', ...
            'resetfitLS', ...
            'resetfitMan', ...
            'browseTosaveB', ...
            'filenameET', ...
            'saveresultB', ...
            'peakpositionssaveB', ...
            'peakcurvessaveB', ...
            'savefit', ...
            'saveplot', ...
            'nmUnitB', ...
            'pixelUnitB' ...
        };
        enableHandleNames = {...
            'endandstartB', ...
            'saveresultB', ...
            'saveplot', ...
            'LSFitB', ...
            'MFitB' ...
        };
        update_handle_props(handles, disableHandleNames, 'Enable', 'off');
        update_handle_props(handles, enableHandleNames, 'Enable', 'on');
    end

    function [] = prompt_update_plot_region(handles)
        selectedAxTab = get(handles.AxesTabGroup, 'SelectedTab');
        selectedLSFit = strcmp(get(selectedAxTab, 'Tag'), 'lsqfAx');
        hAxis = findobj(get(selectedAxTab, 'Children'), 'Type', 'axes');
        if isempty(hAxis)
            return;
        end
        if length(hAxis) > 1
            hAxis = hAxis{1};
        end

        barcode = get_barcode();
        maxRight = length(barcode);
        if maxRight < 1
            return;
        end
        minLeft = 1;
        barcode = get_barcode();
        rectPosVect = getrect(hAxis);
        rectLeft = max(minLeft, round(rectPosVect(1)));
        rectRight = min(maxRight, round(rectPosVect(1) + rectPosVect(3)));
        
        if (rectLeft >= rectRight)
            return;
        end
        xi = rectLeft;
        xf = rectRight;
        x = (xi:xf);
        set_x(x);
        barcodeLineColor = get_barcode_line_color();
        
        barcodeRegion = barcode(x);
        
        import ELF.UI.plot_barcode_intesity;
        plot_barcode_intesity(hAxis, x, barcodeRegion, barcodeLineColor);
        axes(hAxis);
        zoom on;
        
        if selectedLSFit
            makeVisibleHandleNames = { ...
                'resetfitLS' ...
            };
            enableHandleNames = {...
                'numpeaksST', ...
                'NPEAKS', ...
                'resetfitLS', ...
                'LSFitB', ...
                'MFitB' ...
            };
        else
            makeVisibleHandleNames = { ...
                'resetfitMan', ...
                'resetfitLS'
            };
            enableHandleNames = { ...
                'resetfitMan', ...
                'MFitB' ...
            };
        end
        update_handle_props(handles, makeVisibleHandleNames, 'Visible', 'on');
        update_handle_props(handles, enableHandleNames, 'Enable', 'on');

    end


    function [] = prompt_update_from_aligned_kymo(handles)
        [aborted, barcode, ~, alignedKymoTiffFilepath] = prompt_barcode_from_aligned_kymo();
        if aborted
            return;
        end
        
        update_paths_from_source_path(handles, alignedKymoTiffFilepath);
        
        update_barcode_and_plots(handles, barcode);
        
        
        disableHandleNames = { ...
            'NPEAKS', ...
            'numpeaksST', ...
            'chi2EditLS', ...
            'chi2EditM', ...
            'resetfitLS', ...
            'resetfitMan', ...
            'browseTosaveB', ...
            'filenameET', ...
            'saveresultB', ...
            'peakpositionssaveB', ...
            'peakcurvessaveB', ...
            'savefit', ...
            'saveplot', ...
            'nmUnitB', ...
            'pixelUnitB' ...
        };
        enableHandleNames = {...
            'endandstartB', ...
            'saveresultB', ...
            'saveplot', ...
            'LSFitB', ...
            'MFitB' ...
        };
        update_handle_props(handles, disableHandleNames, 'Enable', 'off');
        update_handle_props(handles, enableHandleNames, 'Enable', 'on');
    end

    function [] = prompt_update_from_barcode_text_file(handles)
        [aborted, barcode, txtBarcodeFilepath] = prompt_barcode_from_text();
        if aborted
            return;
        end
        update_paths_from_source_path(handles, txtBarcodeFilepath);
        
        
        update_barcode_and_plots(handles, barcode);
        
        
        disableHandleNames = {...
            'NPEAKS', ...
            'numpeaksST', ...
            'chi2EditLS', ...
            'chi2EditM', ...
            'resetfitLS', ...
            'resetfitMan', ...
            'browseTosaveB', ...
            'filenameET', ...
            'saveresultB', ...
            'peakpositionssaveB', ...
            'peakcurvessaveB', ...
            'savefit', ...
            'saveplot',...
            'nmUnitB', ...
            'pixelUnitB' ...
        };
        enableHandleNames = {...
            'LSFitB', ...
            'MFitB', ...
            'endandstartB', ...
            'saveresultB', ...
            'saveplot' ...
        };
    
        update_handle_props(handles, disableHandleNames, 'Enable', 'off');
        update_handle_props(handles, enableHandleNames, 'Enable', 'on');
    end

    function [] = update_barcode_and_plots(handles, barcode)
        import ELF.UI.plot_barcode_intesity;
        
        smoothedNrmBarcode = normalize_and_smooth_barcode(barcode, 3);
        x = 1:length(smoothedNrmBarcode);
        set_x(x)
        set_barcode(smoothedNrmBarcode);
        barcodeRegion = smoothedNrmBarcode;
        barcodeLineColor = get_barcode_line_color();
        
        
        
        hAxisLeastSq = findobj(get(handles.lsqfAx, 'Children'), 'Type', 'axes');
        if isempty(hAxisLeastSq)
            return;
        end
        if length(hAxisLeastSq) > 1
            hAxisLeastSq = hAxisLeastSq{1};
        end
        plot_barcode_intesity(hAxisLeastSq, x, barcodeRegion, barcodeLineColor);
        
        hAxisManual = findobj(get(handles.manfAx, 'Children'), 'Type', 'axes');
        if isempty(hAxisManual)
            return;
        end
        if length(hAxisManual) > 1
            hAxisManual = hAxisManual{1};
        end
        plot_barcode_intesity(hAxisManual,  x, barcodeRegion, barcodeLineColor);
    end

    function [] = update_paths_from_source_path(handles, srcFilepath)
        [srcDirpath, srcFilename, srcExt] = fileparts(srcFilepath);
        srcFilename = [srcFilename, srcExt];
        fitFilename = sprintf('%s_fit', strrep(srcFilename, '.', ''));
        set_save_dirpath(srcDirpath);
        set(handles.filenameST, 'String', srcFilename);
        set(handles.filenameET, 'String', fitFilename);
    end


    function [lsFitSelectedTabTF] = get_whether_ls_fit_selected_tab(handles)
        selectedTabTag = get(get(handles.fittabgroup, 'SelectedTab'), 'Tag');
        lsFitSelectedTabTF = strcmp(selectedTabTag, 'lsq');
    end


    function [] = set_peaks_table_data(handles, peaksTableData)
        set(handles.peaksTableManual, 'data', peaksTableData);
    end
    function [peaksTableData] = get_peaks_table_data(handles)
        peaksTableData = get(handles.peaksTableManual, 'data');
    end


    function [] = set_mean_background_noise(handles, meanBackgroundNoise)
        set(handles.meanBackET, 'String', meanBackgroundNoise);
    end
    function [meanBackgroundNoise] = get_mean_background_noise(handles)
        meanBackgroundNoise = str2double(get(handles.meanBackET, 'String'));
    end


    function [] = set_std_background_noise(handles, stdBackgroundNoise)
        set(handles.stdBackET, 'String', stdBackgroundNoise);
    end
    function [stdBackgroundNoise] = get_std_background_noise(handles)
        stdBackgroundNoise = str2double(get(handles.stdBackET, 'String'));
    end


    function [] = set_confidence_interval(handles, confidenceInterval)
        set(handles.confidenceInterval, 'String', confidenceInterval);
    end
    function [confidenceInterval] = get_confidence_interval(handles)
        confidenceInterval = str2double(get(handles.confidenceInterval, 'String'));
    end


    function [] = set_psf_sigma_width_nm(handles, psfSigmaWidth_nm)
        set(handles.psfSigmaWidth_nm, 'String', psfSigmaWidth_nm);
    end
    function [psfSigmaWidth_nm] = get_psf_sigma_width_nm(handles)
        psfSigmaWidth_nm = str2double(get(handles.psfSigmaWidth_nm, 'String'));
    end


    function [] = set_nms_per_pixel(handles, pixelWidth_nm)
        set(handles.pixelWidth_nm, 'String', pixelWidth_nm);
    end
    function [pixelWidth_nm] = get_nms_per_pixel(handles)
        pixelWidth_nm = str2double(get(handles.pixelWidth_nm, 'String'));
    end


    function [] = set_psf_sigma_width_px(handles, psfSigmaWidth_px)
        set(handles.sigmapixET, 'String', psfSigmaWidth_px);
    end
    function [psfSigmaWidth_px] = get_psf_sigma_width_px(handles)
        psfSigmaWidth_px = str2double(get(handles.sigmapixET, 'String'));
    end


    function [] = set_area_one_peak(handles, areaOnePeak)
        set(handles.areaOnePeak, 'String', areaOnePeak);
    end
    function [areaOnePeak] = get_area_one_peak(handles)
        areaOnePeak = str2double(get(handles.areaOnePeak, 'String'));
    end


    function [] = set_area_one_peak_std(handles, areaOnePeakStd)
        set(handles.areaOnePeakStd, 'String', areaOnePeakStd);
    end
    function [areaOnePeakStd] = get_area_one_peak_std(handles)
        areaOnePeakStd = str2double(get(handles.areaOnePeakStd, 'String'));
    end


    function [] = update_psf_sigma_width_px(handles)
        psfSigmaWidth_nm = get_psf_sigma_width_nm(handles);
        pixelWidth_nm = get_nms_per_pixel(handles);
        psfSigmaWidth_px = psfSigmaWidth_nm / pixelWidth_nm;
        set_psf_sigma_width_px(handles, psfSigmaWidth_px);
    end




    function [] = update_man_fit_plot(handles, x, totalFitRegion, fitLineColor)
        global elfAppStateData;
        if isfield(elfAppStateData, 'manFitPlotHandle')
            reset(elfAppStateData.manFitPlotHandle);
        end
        
        hAxis = handles.manfAxes;
        plotHandleFitRegion = plot(hAxis, ...
            x, totalFitRegion, ...
            'LineWidth', 1.5, ...
            'Color', fitLineColor);
        
        elfAppStateData.manFitPlotHandle = plotHandleFitRegion;
    end




    function [] = set_fit_data(lsFit, probGoodFit, posVect, areaVect, totalFitRegion)
        global elfAppStateData;

        if lsFit
            fieldStr = 'ls';
        else
            fieldStr = 'man';
        end
        
        elfAppStateData.fitData.(fieldStr).probGoodFit = probGoodFit;
        elfAppStateData.fitData.(fieldStr).posVect = posVect;
        elfAppStateData.fitData.(fieldStr).areaVect = areaVect;
        elfAppStateData.fitData.(fieldStr).totalFitRegion = totalFitRegion;
        
    end
    function [probGoodFit, posVect, areaVect, totalFitRegion] = get_fit_data(lsFit)
        global elfAppStateData;
        
        if lsFit
            fieldStr = 'ls';
        else
            fieldStr = 'man';
        end

        probGoodFit = elfAppStateData.fitData.(fieldStr).probGoodFit;
        posVect = elfAppStateData.fitData.(fieldStr).posVect;
        areaVect = elfAppStateData.fitData.(fieldStr).areaVect;
        totalFitRegion = elfAppStateData.fitData.(fieldStr).totalFitRegion;
    end

    function [] = set_x(x)
        global elfAppStateData;
        elfAppStateData.xi = x(1);
        elfAppStateData.xf = x(end);
    end
    function [x] = get_x()
        global elfAppStateData;
        x = (elfAppStateData.xi:elfAppStateData.xf);
    end


    function [] = set_delt_data(deltPosAll, deltAreAll)
        global elfAppStateData;
        elfAppStateData.deltPos_all = deltPosAll;
        elfAppStateData.deltAre_all = deltAreAll;
    end
    function [deltPosAll, deltAreAll] = get_delt_data()
        global elfAppStateData;
        deltPosAll = elfAppStateData.deltPos_all;
        deltAreAll = elfAppStateData.deltAre_all;
    end


    function [] = set_save_dirpath(saveDirpath)
        global elfAppStateData;
        elfAppStateData.savedirpath = saveDirpath;
    end
    function [saveDirpath] = get_save_dirpath()
        global elfAppStateData;
        saveDirpath = elfAppStateData.savedirpath;
    end

    function [] = set_barcode(barcode)
        global elfAppStateData;
        elfAppStateData.total_barcode = barcode;
    end
    function [barcode] = get_barcode()
        global elfAppStateData;
        barcode = elfAppStateData.total_barcode;
    end


    function [] = set_barcode_line_color(barcodeLineColor)
        global elfAppStateData;
        elfAppStateData.colorSettings.barcodeLine = barcodeLineColor;
    end
    function [barcodeLineColor] = get_barcode_line_color()
        global elfAppStateData;
        barcodeLineColor = elfAppStateData.colorSettings.barcodeLine;
    end


    function [] = set_fit_line_color(fitLineColor)
        global elfAppStateData;
        elfAppStateData.colorSettings.fitLine = fitLineColor;
    end
    function [fitLineColor] = get_fit_line_color()
        global elfAppStateData;
        fitLineColor = elfAppStateData.colorSettings.fitLine;
    end


    function [] = set_peak_pos_rect_color(peakPositionRectColor)
        global elfAppStateData;
        elfAppStateData.colorSettings.peakPositionRect = peakPositionRectColor;
    end
    function [peakPositionRectColor] = get_peak_pos_rect_color()
        global elfAppStateData;
        peakPositionRectColor = elfAppStateData.colorSettings.peakPositionRect;
    end

    function [aborted, txtFilepath] = prompt_text_filepath()
        [txtFilename, txtDirpath] = uigetfile({'*.txt'}, 'Select text file');
        if isequal(txtDirpath, 0)
            aborted = true;
            txtFilepath = '';
        else
            aborted = false;
            txtFilepath = fullfile(txtDirpath, txtFilename);
        end
    end

    function [aborted, barcodeFromTxt, txtFilepath] = prompt_barcode_from_text()
        [aborted, txtFilepath] = prompt_text_filepath();
        if aborted
            barcodeFromTxt = [];
            return;
        end
        barcodeFromTxt = dlmread(txtFilepath);
    end

    function smoothedNrmBarcode = normalize_and_smooth_barcode(barcode, smoothWindowSz)
        smoothedNrmBarcode = barcode - min(barcode);
        smoothedNrmBarcode = smooth(smoothedNrmBarcode, smoothWindowSz);
    end

    function [aborted, alignedKymoTimeAvg, alignedKymo, rawKymo, rawKymoTiffFilepath] = prompt_barcode_from_raw_kymo()
        [rawKymoTiffFilename, dirpath] = uigetfile({'*.tiff;*.tif'}, 'Select raw kymograph');
        aborted = isequal(dirpath, 0);
        rawKymoTiffFilepath = '';
        rawKymo = [];
        alignedKymo = [];
        alignedKymoTimeAvg = [];
        if aborted
            return;
        end
        rawKymoTiffFilepath = fullfile(dirpath, rawKymoTiffFilename);
        rawKymo = double(imread(rawKymoTiffFilepath));
        import OptMap.KymoAlignment.NRAlign.nralign;
        [alignedKymo] = nralign(rawKymo);
        alignedKymoTimeAvg = mean(alignedKymo);
    end

    function [aborted, alignedKymoTimeAvg, alignedKymo, alignedKymoTiffFilepath] = prompt_barcode_from_aligned_kymo()
        [alignedKymoTiffFilename, dirpath] = uigetfile({'*.tiff;*.tif'}, 'Select aligned kymograph');
        aborted = isequal(dirpath, 0);
        alignedKymoTiffFilepath = '';
        alignedKymo = [];
        alignedKymoTimeAvg = [];
        if aborted
            return;
        end
        alignedKymoTiffFilepath = fullfile(dirpath, alignedKymoTiffFilename); 
        alignedKymo = imread(alignedKymoTiffFilepath);
        alignedKymoTimeAvg = mean(alignedKymo);
    end



    function [] = update_ls_fit(handles)
        % read input parameters and initialize arrays
        psfSigmaWidth_px = get_psf_sigma_width_px(handles);
        areaOnePeak = get_area_one_peak(handles);
        onePeakAreaStd = get_area_one_peak_std(handles);
        meanBackgroundNoise = get_mean_background_noise(handles);
        stdBackgroundNoise = get_std_background_noise(handles);
        confidenceInterval = get_confidence_interval(handles);
        
        barcode = get_barcode();

        import ELF.Core.run_least_squares_error_min;
        import ELF.Core.calc_chi_squared_error;
        import ELF.Core.calc_param_errors;


        % Divide the barcode in regions for efficiency
        % sortedValues = sort(barcode(:), 'descend');
        % m = mean([sortedValues(1:10); sortedValues(end-9:end)])/2
        xIdxs = get_x();
        xStartIdx = xIdxs(1);
        xEndIdx = xIdxs(end);
        
        barcodeRegion = barcode(xIdxs);
        peakThresh = mean(barcode)/2;
        highInt = find(barcodeRegion >= peakThresh);
        lowInt = find(barcodeRegion < peakThresh);
        pixStep = diff(lowInt);
        pos = find(pixStep ~= 1)';
        pos = [pos, pos + 1];
        pos = sort(pos);
        cuts = lowInt(pos);
        if not(mod(length(cuts), 2) == 0)
            if lowInt(1) > highInt(1)
                cuts = [1, cuts];
            else
                cuts = [cuts, length(xIdxs)];
            end
        end
        ranges = zeros(length(cuts)/2, 2);
        rangeIdx = 1;
        for i=1:2:length(cuts)
            ranges(rangeIdx, :) = [cuts(i) - 1, cuts(i + 1) + 1];
            rangeIdx = rangeIdx + 1;
        end
        ranges = ranges + xStartIdx - 1;
        total_fit = zeros(size(barcode)) + meanBackgroundNoise;
        [N_cuts, ~] = size(ranges);
        fprintf('Finding positions...\n')
        pos_all = zeros(1, 0);
        areas_all = zeros(1, 0);
        deltAreAll = zeros(1, 0);
        deltPosAll = zeros(1, 0);
        numTotalPeaks = 0;
        for rangeIdx = 1:N_cuts
            ends = ranges(rangeIdx,1:2);
            xStartIdxCurr = ends(1);
            xEndIdxCurr = ends(2);
            xIdxsCurr = (xStartIdxCurr:xEndIdxCurr)';
            lenCurr = length(xIdxsCurr);
            
            
            barcodeRegion = barcode(xIdxsCurr);
            % scale area parameters to be of the same order as the position parameters
            scaleFactor = xStartIdxCurr + round(lenCurr/2);
            areaOnePeakScaled = areaOnePeak / scaleFactor;
                % --------------------------------------- number of peaks -----------------------------------------------
                % read if the number of peaks has been set by the user
            nPeaksSetByUser = str2double(get(handles.NPEAKS,'String'));
            
            if (nPeaksSetByUser > 0) && (nPeaksSetByUser == floor(nPeaksSetByUser))
                  numPeaksToFitVect = nPeaksSetByUser;
            else
                nMax = round(sum(barcodeRegion - meanBackgroundNoise) / (areaOnePeak - confidenceInterval * onePeakAreaStd));
                nMin = round(sum(barcodeRegion - meanBackgroundNoise) / (areaOnePeak + confidenceInterval * onePeakAreaStd));
                numPeaksToFitVect = (nMin:nMax);
            end
            
            % --------------------------------------- start iterations ----------------------------------------------
            probGoodFitRegion = 100;
            for numPeaksToFit = numPeaksToFitVect % peaks-loop
                % find the best fit for that number of peaks
                bestParams = run_least_squares_error_min(numPeaksToFit, scaleFactor, areaOnePeak, onePeakAreaStd, confidenceInterval, xStartIdxCurr, xEndIdxCurr, barcodeRegion, psfSigmaWidth_px, areaOnePeakScaled, meanBackgroundNoise);
                tmpPeakPositionsVect = bestParams(1:numPeaksToFit);
                tmpPeakAreasVect = bestParams(numPeaksToFit + (1:numPeaksToFit));
                tmpFit = zeros(size(xIdxsCurr));
                for peakNum = 1:numPeaksToFit
                    newpeak = areaOnePeakScaled * tmpPeakAreasVect(peakNum) * gaussmf(xIdxsCurr, [psfSigmaWidth_px, tmpPeakPositionsVect(peakNum)]);
                    tmpFit = tmpFit + newpeak;
                end
                tmpFit = tmpFit / (sqrt(2 * pi) * psfSigmaWidth_px) + meanBackgroundNoise;
                % if good, save it
                chiSquareTemp = calc_chi_squared_error(barcodeRegion, tmpFit, stdBackgroundNoise);
                probGoodFitTemp = chi2cdf(chiSquareTemp,lenCurr-2*numPeaksToFit);
                if (probGoodFitTemp < probGoodFitRegion)
                    probGoodFitRegion = probGoodFitTemp;
                    LSFitRegion = tmpFit;
                    peakPositionsVect = tmpPeakPositionsVect;
                    areasVect = tmpPeakAreasVect;
                    numPeaksRegion = numPeaksToFit;
                end
                % stop fitting more peaks if the fit is good enough
                if probGoodFitTemp < (0.00005 * numPeaksToFit)
                    break;
                end
            end % end of peaks-loop
            areasVect = areasVect/scaleFactor;
            warning('off', 'MATLAB:nearlySingularMatrix');
            [deltPosRegion, deltAreasRegion] = calc_param_errors(...
                length(barcodeRegion), ...
                peakPositionsVect, ...
                areasVect, ...
                psfSigmaWidth_px, ...
                xStartIdxCurr, ...
                xEndIdxCurr, ...
                stdBackgroundNoise, ...
                areaOnePeak);
            [peakPositionsVect, index]= sort(peakPositionsVect);
            areasVect = areasVect(index);

            areas_all = [areas_all, areasVect];
            pos_all = [pos_all, peakPositionsVect];
            deltPosAll = [deltPosAll, deltPosRegion];
            deltAreAll = [deltAreAll, deltAreasRegion];
            numTotalPeaks = numTotalPeaks + numPeaksRegion;
            total_fit(xIdxsCurr) = zeros(1, length(xIdxsCurr)) + LSFitRegion;
        end

        resultTable = sprintf('#Peak position (pixels)           Area One Peak        \n');
        charPlusMinus = char(177);
        for peakIdx = 1:numTotalPeaks
            resultTable = sprintf('%s %s %17s %s %s %13s %s %s\n', ...
                resultTable, ...
                num2str(peakIdx, '%d'), ...
                num2str(pos_all(peakIdx), '%5.1f'), ...
                charPlusMinus, ...
                num2str(deltPosAll(peakIdx), 1), ...
                num2str(areas_all(peakIdx), '%3.2f'), ...
                charPlusMinus, ...
                num2str(deltAreAll(peakIdx), 1));
        end
        disp(resultTable)
        if numTotalPeaks < 25
            if numTotalPeaks < 15
                fontSize = 8.5;
            elseif numTotalPeaks < 18
                fontSize = 8;
            elseif numTotalPeaks < 22
                fontSize = 7;
            else
                fontSize = 6;
            end
            set(handles.NPEAKS, 'String', numTotalPeaks);
            set(handles.peaksResultLsqFit, ...
                'FontSize', fontSize, ...
                'String', resultTable, ...
                'Visible', 'on')
            
            
            enableHandleNames = { ...
                'chi2EditLS' ...
            };
            update_handle_props(handles, enableHandleNames, 'Enable', 'on');
        end
        
        rectColorA = [0.4, 0.4, 0.4];
        rectColorB = get_peak_pos_rect_color();
        xIdxs = xStartIdx:xEndIdx;
        totalFitRegion = total_fit(xIdxs);
        barcodeRegion = barcode(xIdxs);
        barcodeLineColor = get_barcode_line_color();
        
        % Plot
        
        hAxisLeastSquares = findobj(get(handles.lsqfAx, 'Children'), 'Type', 'axes');
        if isempty(hAxisLeastSquares)
            return;
        end
        if length(hAxisLeastSquares) > 1
            hAxisLeastSquares = hAxisLeastSquares{1};
        end
        axes(hAxisLeastSquares);
        cla(hAxisLeastSquares, 'reset');
        plot(hAxisLeastSquares, xIdxs, barcodeRegion, ...
            'LineWidth', 1.5, ...
            'Color', barcodeLineColor);
        hold(hAxisLeastSquares, 'on');
        plot(hAxisLeastSquares, xIdxs, totalFitRegion, ...
            'LineWidth', 1.5, ...
            'Color', barcodeLineColor);
        hold(hAxisLeastSquares, 'on');

        plot(hAxisLeastSquares, ...
            0, 0, ...
            'Color', rectColorB)
        plot(hAxisLeastSquares, ...
            0, 0, ...
            'Color', rectColorA);
        
        hold(hAxisLeastSquares, 'on');
        
        
        % maxBarcodeVal = max(barcode);
        % rects = cell(numTotalPeaks, 1);
        % for peakIdx=1:numTotalPeaks
        %     peakDeltaPos = deltPosAll(peakIdx);
        %     if (confidenceInterval * peakDeltaPos) >= 2
        %         posVect = [posit_all(peakIdx) - 0.25, 0, 0.5, 1.2 * maxBarcodeVal];
        %         rectColor = rectColorA;
        %     else
        %         posVect = [posit_all(peakIdx) - confidenceInterval * peakDeltaPos, 0, 2 * confidenceInterval * peakDeltaPos, 1.2 * maxBarcodeVal];
        %         rectColor = rectColorB;
        %     end
        %     rects(peakIdx) = rectangle(...
        %         'Position', posVect, ...
        %         'FaceColor', rectColor, ...
        %         'EdgeColor', rectColor);
        % end
        legend('Barcode', 'Fit', 'Peaks with error<2pix', 'Peaks with error>2pix')
        % Chi2 and enable save
        chiSquareError = calc_chi_squared_error(barcodeRegion, totalFitRegion, stdBackgroundNoise);
        degsOfFreedom = (length(xIdxs)- 2*numTotalPeaks - 1);
        probGoodFit = chi2cdf(chiSquareError, length(xIdxs) - 2*numTotalPeaks);
        
        fprintf('Chi^2 Error:          %g\n', chiSquareError)
        fprintf('Degrees of freedom:   %d\n', degsOfFreedom);
        fprintf('p-value:              %g\n', probGoodFit);
        
        enableHandleNames = { ...
            'resetfitLS', ...
            'chi2EditLS', ...
            'browseTosaveB', ...
            'filenameET', ...
            'peakpositionssaveB', ...
            'peakcurvessaveB', ...
            'savefit', ...
            'nmUnitB', ...
            'pixelUnitB', ...
            'saveresultB', ...
            'saveplot' ...
        };
        update_handle_props(handles, enableHandleNames, 'Enable', 'on');
        
        lsFit = true;
        set_fit_data(lsFit, probGoodFit, pos_all, areas_all, totalFitRegion(:));
        set(handles.chi2EditLS, 'String', probGoodFit);
        set_delt_data(deltPosAll, deltAreAll);
    end

    function [] = update_mat_fit(handles)
        
        import ELF.Core.calc_chi_squared_error;

        x = get_x();
        barcode = get_barcode();
        fitLineColor = get_fit_line_color();
        barcodeRegion = barcode(x);
        
        psfSigmaWidthPx = get_psf_sigma_width_px(handles);
        areaOnePeak = get_area_one_peak(handles);
        meanBackgroundNoise = get_mean_background_noise(handles);
        stdBackgroundNoise = get_std_background_noise(handles);
        peaksTableData = get_peaks_table_data(handles);
        
        baseline = meanBackgroundNoise + zeros(1, length(x));
        allPos = peaksTableData(:, 1);
        allAr = peaksTableData(:, 2);
        mask = (allPos > 0) & (allAr > 0);
        posVect = allPos(mask);
        areaVect = allAr(mask);
        vectLen = length(areaVect);
        totalFitRegion = zeros(size(barcodeRegion))';
        for vectIdx = 1:vectLen
          totalFitRegion = totalFitRegion + gaussmf(x, [psfSigmaWidthPx, posVect(vectIdx)]) * areaOnePeak / (sqrt(2 * pi) * psfSigmaWidthPx) * areaVect(vectIdx);
        end
        totalFitRegion = totalFitRegion + baseline;
        
        
        chiSquareError = calc_chi_squared_error(barcodeRegion, totalFitRegion, stdBackgroundNoise);
        probGoodFitMan = chi2cdf(chiSquareError, length(x) - (2*vectLen));
        enableHandleNames = { ...
            'chi2EditM', ...
            'browseTosaveB', ...
            'filenameET', ...
            'peakpositionssaveB', ...
            'peakcurvessaveB', ...
            'savefit', ...
            'nmUnitB', ...
            'pixelUnitB', ...
            'saveresultB' ...
        };
        update_handle_props(handles, enableHandleNames, 'Enable', 'on');
        
        lsFit = false;
        set_fit_data(lsFit, probGoodFitMan, posVect', areaVect', totalFitRegion(:));
        set(handles.chi2EditM, 'String', probGoodFit);
        
        update_man_fit_plot(handles, x, totalFitRegion, fitLineColor);
        
        set_std_background_noise(handles, stdBackgroundNoise);
    end

    function [] = reset_fit(handles)
        barcode = get_barcode();
        x = 1:length(barcode);
        
        lsFitSelectedTabTF = get_whether_ls_fit_selected_tab(handles);
        if lsFitSelectedTabTF
            set(handles.peaksResultLsqFit, 'String', '');
            set(handles.NPEAKS, 'String', '');
            set(handles.chi2EditLS, 'String', '');
        
            set_x(x);
            
            hAxisLeastSq = findobj(get(handles.lsqfAx, 'Children'), 'Type', 'axes');
            if isempty(hAxisLeastSq)
                return;
            end
            if length(hAxisLeastSq) > 1
                hAxisLeastSq = hAxisLeastSq{1};
            end
            hAxis = hAxisLeastSq;
        elseif strcmp(selected.Tag, 'man')
            peaksTableData = zeros([40 2]);
            set_peaks_table_data(handles, peaksTableData);
            set(handles.chi2EditM, 'String', '');

            hAxisManual = findobj(get(handles.manfAx, 'Children'), 'Type', 'axes');
            if isempty(hAxisManual)
                return;
            end
            if length(hAxisManual) > 1
                hAxisManual = hAxisManual{1};
            end
            hAxis = hAxisManual;
        end
        
        import ELF.UI.plot_barcode_intesity;
        barcodeLineColor = get_barcode_line_color();
        plot_barcode_intesity(hAxis, x, barcode, barcodeLineColor);
    end

    function [] = try_update_save_dirpath()
        saveDirpath = uigetdir();
        if isequal(saveDirpath, 0)
            return;
        end
        set_save_dirpath(saveDirpath);
    end


    function [unitsPerPixel, unitStr] = get_unit_data(handles)
        pixelWidth_nm = get_nms_per_pixel(handles);
        shouldUseNmUnits = (get(handles.nmUnitB, 'Value') == 1);
        
        unitStr = 'px';
        unitsPerPixel = 1;
        if shouldUseNmUnits
            unitStr = 'nm';
            unitsPerPixel = pixelWidth_nm;
        end
    end



    function [filenamePrefix, shouldExportPPATxt, shouldExportIntensityTxt, shouldExportPeaksTxt] = get_export_options(handles)
        filenamePrefix = get(handles.filenameET, 'String');
        
        shouldExportPPATxt = (get(handles.peakpositionssaveB, 'Value') == 1);
        shouldExportIntensityTxt = (get(handles.savefit, 'Value') == 1);
        shouldExportPeaksTxt = (get(handles.peakcurvessaveB, 'Value') == 1);
    end


    function [] = export_results(handles)
        [filenamePrefix, shouldExportPPATxt, shouldExportIntensityTxt, shouldExportPeaksTxt] = get_export_options(handles);
        
        shouldSavePlotTF = (get(handles.saveplot, 'Value') == 1);
        
        x = get_x();
        [unitsPerPixel, unitStr] = get_unit_data(handles);
        
        [defaultTxtDirpath] = get_save_dirpath();
        

        shouldUseLS = get_whether_ls_fit_selected_tab(handles);
        
        [probGoodFit, pos, area, totalFitRegion] = get_fit_data(shouldUseLS);
        
        
        psfSigmaWidth_px = get_psf_sigma_width_px(handles);
        areaOnePeak = get_area_one_peak(handles);
        meanBackgroundNoise = get_mean_background_noise(handles);
        
        import ELF.Export.export_ppa_txt;
        import ELF.Export.Helper.get_default_ppa_txt_filepath;
        if shouldExportPPATxt
            [deltPosAll, deltAreAll] = get_delt_data();
            txtFilepathPPA = get_default_ppa_txt_filepath(defaultTxtDirpath, filenamePrefix);
            export_ppa_txt(txtFilepathPPA, probGoodFit, pos, area, psfSigmaWidth_px, areaOnePeak, meanBackgroundNoise, unitsPerPixel, unitStr, deltPosAll, deltAreAll);
        end

        import ELF.Export.export_intensity_txt;
        import ELF.Export.Helper.get_default_intensity_txt_filepath;
        if shouldExportIntensityTxt
            txtFilepathIntensity = get_default_intensity_txt_filepath(defaultTxtDirpath, filenamePrefix);
            export_intensity_txt(txtFilepathIntensity, probGoodFit, psfSigmaWidth_px, areaOnePeak, meanBackgroundNoise, x, unitsPerPixel, unitStr, totalFitRegion);
        end
        
        import ELF.Export.export_peaks_txt;
        import ELF.Export.Helper.get_default_peaks_txt_filepath;
        if shouldExportPeaksTxt
            txtFilepathPeaks = get_default_peaks_txt_filepath(defaultTxtDirpath, filenamePrefix);
            export_peaks_txt(txtFilepathPeaks, probGoodFit, pos, area, psfSigmaWidth_px, areaOnePeak, meanBackgroundNoise, x, unitsPerPixel, unitStr);
        end

        
        if shouldSavePlotTF
            hFigTmp = figure();
            if shouldUseLS
                hAxisLeastSq = findobj(get(handles.lsqfAx, 'Children'), 'Type', 'axes');
                if isempty(hAxisLeastSq)
                    return;
                end
                if length(hAxisLeastSq) > 1
                    hAxisLeastSq = hAxisLeastSq{1};
                end
                hAxisFit = hAxisLeastSq;
            else
                hAxisManual = findobj(get(handles.manfAx, 'Children'), 'Type', 'axes');
                if isempty(hAxisManual)
                    return;
                end
                if length(hAxisManual) > 1
                    hAxisManual = hAxisManual{1};
                end
                hAxisFit = hAxisManual;
            end
            copyobj(hAxisFit, hFigTmp);
        end
    end


end